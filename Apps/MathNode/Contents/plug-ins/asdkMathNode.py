#-
# ==========================================================================
#-
# ==========================================================================
# Copyright (C) 2012 Autodesk, Inc. and/or its licensors.  All 
# rights reserved.
#
# The coded instructions, statements, computer programs, and/or related 
# material (collectively the "Data") in these files contain unpublished 
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
# licensors, which is protected by U.S. and Canadian federal copyright 
# law and by international treaties.
#
# The Data is provided for use exclusively by You. You have the right 
# to use, modify, and incorporate this Data into other products for 
# purposes authorized by the Autodesk software license agreement, 
# without fee.
#
# The copyright notices in the Software and this entire statement, 
# including the above license grant, this restriction and the 
# following disclaimer, must be included in all copies of the 
# Software, in whole or in part, and all derivative works of 
# the Software, unless such copies or derivative works are solely 
# in the form of machine-executable object code generated by a 
# source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
# AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
# WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
# NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
# PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
# TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
# BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
# AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
# OR PROBABILITY OF SUCH DAMAGES.
#
# ==========================================================================
#+

# Author
# This plug-in was written by Cyrille Fauvel from the Autodesk Developer Network team.
# 
# Release History
# 1.0.0    Original release                     (August 1, 2012)

import sys
from math import *

import maya.OpenMaya as OpenMaya
import maya.OpenMayaMPx as OpenMayaMPx

# Node definition
kPluginNodeName ="asdkMathNode"
kPluginNodeId =OpenMaya.MTypeId (0x00118380)

# Class definition
class asdkMathNode (OpenMayaMPx.MPxNode):
	expression =OpenMaya.MObject ()
	aIn =OpenMaya.MObject ()
	bIn =OpenMaya.MObject ()
	cIn =OpenMaya.MObject ()
	result =OpenMaya.MObject ()
	
	def __init__ (self):
		OpenMayaMPx.MPxNode.__init__ (self)
		
	def compute (self, plug, dataBlock):
		if ( plug == asdkMathNode.result ):
			exprHandle =dataBlock.inputValue (asdkMathNode.expression)
			exprStData =OpenMaya.MFnStringData (exprHandle.data ())
			exprSt =exprStData.string ()
			
			aHandle =dataBlock.inputValue (asdkMathNode.aIn)
			a =aHandle.asFloat ()
			bHandle =dataBlock.inputValue (asdkMathNode.bIn)
			b =bHandle.asFloat ()
			cHandle =dataBlock.inputValue (asdkMathNode.cIn)
			c =cHandle.asFloat ()

			try:
				result =eval (exprSt)
			except:
				sys.stderr.write ("Expression %s failed" % exprSt)
				raise

			outputHandle =dataBlock.outputValue (asdkMathNode.result)
			outputHandle.setFloat (result)
			dataBlock.setClean (plug)
			return
		return OpenMaya.kUnknownParameter
		
# Node creator
def nodeCreator ():
	return OpenMayaMPx.asMPxPtr (asdkMathNode ())

# Node initializer
def nodeInitializer ():
	# Input
	exprSt =OpenMaya.MFnStringData ()
	exprStCreator =exprSt.create ("a")
	tAttr =OpenMaya.MFnTypedAttribute ()
	asdkMathNode.expression =tAttr.create ("expression", "expr", OpenMaya.MFnStringData.kString, exprStCreator)
	tAttr.setStorable (1)
	tAttr.setKeyable (False)

	nAttr =OpenMaya.MFnNumericAttribute ()
	asdkMathNode.aIn =nAttr.create ("aIn", "a", OpenMaya.MFnNumericData.kFloat, 0.0)
	nAttr.setStorable (1)
	asdkMathNode.bIn =nAttr.create ("bIn", "b", OpenMaya.MFnNumericData.kFloat, 0.0)
	nAttr.setStorable (1)
	asdkMathNode.cIn =nAttr.create ("cIn", "c", OpenMaya.MFnNumericData.kFloat, 0.0)
	nAttr.setStorable (1)
	
	# Output
	nAttr =OpenMaya.MFnNumericAttribute ()
	asdkMathNode.result =nAttr.create ("result", "res", OpenMaya.MFnNumericData.kFloat, 0.0)
	nAttr.setStorable (1)
	nAttr.setWritable (1)
	
	# Setup node attributes
	asdkMathNode.addAttribute (asdkMathNode.expression)
	asdkMathNode.addAttribute (asdkMathNode.aIn)
	asdkMathNode.addAttribute (asdkMathNode.bIn)
	asdkMathNode.addAttribute (asdkMathNode.cIn)
	asdkMathNode.addAttribute (asdkMathNode.result)
	
	asdkMathNode.attributeAffects (asdkMathNode.expression, asdkMathNode.result)
	asdkMathNode.attributeAffects (asdkMathNode.aIn, asdkMathNode.result)
	asdkMathNode.attributeAffects (asdkMathNode.bIn, asdkMathNode.result)
	asdkMathNode.attributeAffects (asdkMathNode.cIn, asdkMathNode.result)

# Initialize the scripted plug-in
def initializePlugin (mobject):
	mplugin =OpenMayaMPx.MFnPlugin (mobject, "Autodesk", "1.0.0")
	try:
		mplugin.registerNode (kPluginNodeName, kPluginNodeId, nodeCreator, nodeInitializer)
	except:
		sys.stderr.write ("Failed to register node: %s" % kPluginNodeName)
		raise

# Uninitialize the scripted plug-in
def uninitializePlugin (mobject):
	mplugin =OpenMayaMPx.MFnPlugin (mobject)
	try:
		mplugin.deregisterNode (kPluginNodeId)
	except:
		sys.stderr.write ("Failed to deregister node: %s" % kPluginNodeName)
		raise

// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

////      bgCreateCurveFromEdges.mel ////	(creates a psuedo curve on poly from a series of connected poly edges)//		//  NOTE: This script will duplicate selected edges on a poly object as curves.//	  All edges must be contiguous.  A window will prompt the user to select//	  the degree of the curve.  It will then connect the resulting edge curves//	  while maintaining history. The end result will be a single 1 or 3 degree  //	  curve that will be bound to the edges/vertices of the poly object.  There //	  must be at least 3 edges selected to achieve a 3 degree (cubic) curve //	  otherwise a linear curve will be created automatically.  ////	  Fit CVs to Vertices : Snaps Curve CVs to Poly vertices////	  Connect to Mesh :	Maintain curve history between curve and mesh////	  Fix Flipping : Fixes occasional problem with attachment on last curve////	  Close Curve : Connects begining and ending points of curve////	  The purpose is to create a psuedo curve on surface for a poly object for //	  for various uses, including paint effects strokes.  All interim curves//	  are hidden and grouped under the "edgeHistGrp" node so that history can be //	  maintained.//// Author:             Steven T. L. Roselle//                     //// Creation Date:      ( 09/10/00 )// Last Update:        ( 11/04/02 )//// Input Arguments: NONE//global proc createCrv(int $degree, int $ch, int $fit, int $close, int $revFlip){ // Initialize edge and curve lists and check for valid selection//int $error = 0;string $attach[];string $crvs[];string $edgeList[] = `filterExpand -sm 32` ;int $size = `size $edgeList`;if ($size < 1)	{	print ("\n\n\/\/ERROR: Nothing valid selected.\/\/");	$error = 1;	}	// Disable paint select if it was in use//escapeCurrentTool; // Duplicate edges as curves and put in temporary curve list//int $c = 0;for ($edge in $edgeList)	{	string $tmpCrv[] = `duplicateCurve -name tmpCrv -ch 1 -rn 0 -local 0 $edge`;	$crvs[$c] = $tmpCrv[0];	$c ++; 		}// Get initial number of curves in list for loop// and make last curve in list the attach curve//if ($error)	{	$size = 0;	}else 	{	$size = `size  $crvs` - 1;	rename $crvs[`size  $crvs` - 1] tmpAttach;	}// Step through list of curves and attach adjacent curves to the attach curve// This is done by comparing the endpoints of all curves until a match is found//while ($size > 0)	{		// Store size of list before comparison loop	//	$sizein = $size;	// Compare attach curve to all other curves in list	//	for ($c = 0; $c < $size; $c++)		{				// Get number of points on attach curve		//		select -r "tmpAttach.cv[*]";		string $cvList[] = `filterExpand -sm 28`;		int $c1_lastCV = (`size($cvList)` - 1);						// Get number of points on curve2		//		string $tmp = $crvs[$c]+".cv[*]";				select -r $tmp;		string $cvList[] = `filterExpand -sm 28`;		int $c2_lastCV = (`size($cvList)` - 1);						// Get positional values of endpoints for both curves		//		//print ("Compare "+$crvs[0]+" to "+$crvs[$c]+"\n");		string $tmp = "tmpAttach.cv[0]";		float $c1p1[] = `xform -q -t $tmp`;  //attach curve endpoint1		string $tmp = "tmpAttach.cv["+$c1_lastCV+"]";		float $c1p2[] = `xform -q -t $tmp`;  //attach curve endpoint2		string $tmp = $crvs[$c]+".cv[0]";		float $c2p1[] = `xform -q -t $tmp`;  //curve2 endpoint1		string $tmp = $crvs[$c]+".cv["+$c2_lastCV+"]";		float $c2p2[] = `xform -q -t $tmp`;  //curve2 endpoint2			// Compare pairs of endpoints looking for a match. 		// If match is found, attach curves, replace first curve with		// new attached curve, rename second curve for later use		//		int $match = ptCmp($c1p1,$c2p1);		if ($match)			{			$attach = `attachCurve  -ch 1 -rpo 1 -kmk 1 -m 1 -bb 0.5 -bki 0 -p 0.1 tmpAttach $crvs[$c] `;			rename $crvs[$c] TMPCRV;			}		else 			{			int $match = ptCmp($c1p1,$c2p2);			if ($match)				{				$attach = `attachCurve  -ch 1 -rpo 1 -kmk 1 -m 1 -bb 0.5 -bki 0 -p 0.1 tmpAttach $crvs[$c] `;				rename $crvs[$c] TMPCRV;				}			else 				{				int $match = ptCmp($c1p2,$c2p1);				if ($match)					{					$attach = `attachCurve  -ch 1 -rpo 1 -kmk 1 -m 1 -bb 0.5 -bki 0 -p 0.1 tmpAttach $crvs[$c] `;					rename $crvs[$c] TMPCRV;					}				else 					{					int $match = ptCmp($c1p2,$c2p2);					if ($match)						{						$attach = `attachCurve  -ch 1 -rpo 1 -kmk 1 -m 1 -bb 0.5 -bki 0 -p 0.1 tmpAttach $crvs[$c] `;						rename $crvs[$c] TMPCRV;						}											}				}				} // close nested if statements					} // close for statement		// select all remaining tmpCrv's and rebuild	// list of remaining curves to be attached	//	select -cl;	string $sel[] = `ls "tmpCrv*"`;	if (`size($sel)`)		{		select -r $sel;		select -d "tmpCrv*Shape"; //remove shape nodes from selection list			}	string $sel[] = `ls -sl`;	$crvs = $sel; //remaining curves	// Check size of new list after comparison loop. If unchanged,	// print ERROR message clean up temporary curves and exit.	// Otherwise set new size and check remaining curves.	//	$sizeout = (`size($crvs)`);	if (($sizeout == $sizein) && ($sizeout > 0))		{		print ("\n\n\/\/ERROR: All edges must be contiguous.\/\/");		$error = 1;		delete "tmpCrv*";		if( `objExists tmpAttach`)			delete "tmpAttach"; 		if( `objExists TMPCRV`) 			delete "TMPCRV*";		select $edgeList;		$size = 0;		break;		}	else		$size = $sizeout;	} // close while				// bypass this and exit if error was found otherwise finish the job.	// 	if ($error != 1)		{		//Make list of tmp curves for history		//		select -cl;		string $sel[] = `ls "TMPCRV*"`;		if (`size($sel)`)			{			select -r $sel;			select -d "TMPCRV*Shape"; //remove shape nodes from selection list				}		string $sel[] = `ls -sl`;		if ($ch) 			{			//Maintain history and connection to mesh			//Rename all tmp curves in list to dupEdge and group under edgeHistGrp			//			for ($tmp in $sel)				{				rename $tmp "dupEdge";				}			if( `objExists edgeHistGrp`)				ungroup edgeHistGrp;			if( `objExists dupEdge`)				{				hide "dupEdge*";				select -r "dupEdge*";				group -name edgeHistGrp;				}				}		else				{			// Delete history and extra curves			//			select -r "tmpAttach";			DeleteHistory;			delete $sel;			}		//Get number of points on curve		select -r "tmpAttach.cv[*]";		string $cvs[] = `filterExpand -sm 28`;		select -r "tmpAttach";		//Rename tmpAttach curve to final edgeCurve		//					rename "tmpAttach" "edgeCurve";		//Rebuild curve. Curve must have 4 or more points for rebuild		//Note: comment out rebuild line to generate a linear poly line instead		//		if (($degree == 3) && (`size($cvs)` >= 4))			{			rebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp $fit -kep 1 -kt 0 -s 4 -d 3 -tol 0.01;			if ($revFlip == 1)  // Reverse unwanted flipping				setAttr ($attach[2] + ".reverse1") 1;				if ($close == 1)  //Cubic close				{				closeCurve -ch 1 -ps 2 -rpo 1 -bb 0.5 -bki 1 -p 0.1;				rebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp $fit -kep 1 -kt 0 -s 4 -d 3 -tol 0.01;				}			print ("\nEdges duplicated successfully as a cubic curve ");			}		else			{			if ($close == 1)  //Linear close				closeCurve -ch 1 -ps 2 -rpo 1 -bb 0.5 -bki 0 -p 0.1;			if ($revFlip == 1)  // Reverse unwanted flipping				setAttr ($attach[2] + ".reverse1") 1;			print ("\nEdges duplicated successfully as a linear curve ");			}		if ($ch)			print (": with curve history");		else			print (": with out history");print $attach;		}}global proc int ptCmp(float $p1[], float $p2[]){	// read in and compare two point positions	// return true:1 if the points are the same	//	float $distance;	float $v[3];	$v[0] = $p1[0] - $p2[0];	$v[1] = $p1[1] - $p2[1];	$v[2] = $p1[2] - $p2[2];	$distance = $v[0]*$v[0] + $v[1]*$v[1] + $v[2]*$v[2];	$distance = sqrt( $distance );					//print ("Distance is : "+$distance+"\n");			if ($distance == 0) 		{		return 1;		}	else		{		return 0;		}}	global proc bgCreateCurveFromEdges(){//Creat UI and prompt user to determine degree of resulting curve//	global string $fitCheckBoxName; 	global int $gCrvDegree;	global int $gCh;	global int $gCloseCurve;	global int $gRevFlip;	global int $gFitState;	// Set default values	$gCrvDegree = 1; $gCh = 1; $gCloseCurve = 0; $gRevFlip = 0; $gFitState = 1;	if( (`window -exists createCurveFromEdges`) == true )			{			deleteUI createCurveFromEdges; 			windowPref -remove createCurveFromEdges;			}	window  -sizeable true  		-widthHeight 135 190		-t "Curve on Poly"		createCurveFromEdges;	columnLayout 		-adj true		;		separator -style none;		separator -style single;		text -label "Select Curve Degree" -fn boldLabelFont;;		radioCollection;		radioButton -label "  Linear (1)" -sl -onc "$gCrvDegree = 1; checkBox -e -en 0 $fitCheckBoxName" -ofc "checkBox -e -en 1 $fitCheckBoxName" ;		radioButton -label "  Cubic  (3)" -onc "$gCrvDegree = 3";		separator -style single;		separator -style none;		$fitCheckBoxName = `checkBox -label "  Fit CVs to Vertices" -v 1  -en 0 -onc "$gFitState = 1" -ofc "$gFitState = 0"`;		separator -style none;		checkBox -label "  Connect To Mesh" -v 1 -onc "$gCh = 1" -ofc "$gCh = 0";		separator -style none;		checkBox -label "  Close Curve" -v 0 -onc "$gCloseCurve = 1" -ofc "$gCloseCurve = 0";		separator -style none;		checkBox -label "  Fix Flipping" -v 0 -onc "$gRevFlip = 1" -ofc "$gRevFlip = 0";		separator -style single;		separator -style none;		button -label "    Apply   " -command ("createCrv($gCrvDegree , $gCh , $gFitState , $gCloseCurve , $gRevFlip )");		//separator -style none;		//button -label "    Close   " -command ("deleteUI createCurveFromEdges;windowPref -remove createCurveFromEdges");	showWindow createCurveFromEdges;}

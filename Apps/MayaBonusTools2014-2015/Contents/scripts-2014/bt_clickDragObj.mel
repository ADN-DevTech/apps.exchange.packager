// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// international treaties.
//



// bt_clickDragObj.mel
//
// Created by Steven T. L. Roselle
//
// Last update: 02/01/12
//
// Tool for click dragging in order to move objects around in the scene.
// Movement will happen based on the existing XZ of each object.
// CTRL will lock movement to vertical (Y) axis.
// Tool can be used with x, v, and c for snapping




global proc float bt_floatToNiceString(float $swFloat)
{
    //Convert long float value to shorter string
    //

    string $swReturn;
    string $swPrintData[];

    if (($swFloat < 0.000001) && ( $swFloat > -0.000001)) $swReturn = "0.000000";
    else

    		{
        string $swTmp = $swFloat;
        tokenize $swTmp "." $swPrintData;
        if (size ($swPrintData) == 2)
	{

                $swPrintData[1] = $swPrintData[1] + "000";
                $swReturn = $swPrintData[0] + "." + `substring $swPrintData[1] 1 3`;
        }
        else 
		$swReturn = $swPrintData[0] + ".000";
    }
    //$swReturn = $niceString;
    return $swReturn;
}


global proc bt_buildMoveContextPress()
{
	//Move selected object with cursor
	//

	float  $pressPosition[] = `draggerContext -query   -anchorPoint buildMoveContext`;
	string $modifier   = `draggerContext -query   -modifier buildMoveContext`;
	string $message;
	string $unit;
	string $tmp;
	
	string $Obj[] = `ls -sl -type transform`;



	$size = `size $Obj`;
	$lastObj = $Obj[$size-1];
	
	$absX = `getAttr ($lastObj+".tx")`;
	$absY = `getAttr ($lastObj+".ty")`;
	$absZ = `getAttr ($lastObj+".tz")`;
	
    optionVar -floatValue bt_groundValue $absY; 

	
	//convert value from cm to current units because draggerContext always returns cm
	$unit = `currentUnit -q -linear`;
	if ($unit != "cm") 
		{
		$tmp = $pressPosition[0];
		$pressPosition[0] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		$tmp = $pressPosition[1];
		$pressPosition[1] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		$tmp = $pressPosition[2];
		$pressPosition[2] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		}
		
	if (`snapMode -q -point` || `snapMode -q -grid`)
		{
		//Move selected object with cursor along view plane
		string $message = ("    tx: "+`bt_floatToNiceString $pressPosition[0]` + "  ty: "+`bt_floatToNiceString $pressPosition[1]` + " tz: "+`bt_floatToNiceString $pressPosition[2]`);
		if ($size == 1)
			{
			draggerContext -edit -drawString $message buildMoveContext;
			move $pressPosition[0] $pressPosition[1] $pressPosition[2];
			}
		else 
			//move -relative ($pressPosition[0] - $absX) ($pressPosition[1] - $absY) ($pressPosition[2] - $absZ);
			move -relative ($pressPosition[0] - $absX) ($pressPosition[1] - $absY) ($pressPosition[2] - $absZ);
		}
	else if ($modifier == "ctrl")
		{
		//Contrain translate to y axis
		string $message = ("    tx: LOCKED ty: "+`bt_floatToNiceString $pressPosition[1]` +  "  tz: LOCKED");
		if ($size == 1)
			{
			draggerContext -edit -drawString $message buildMoveContext;				
			move -y $pressPosition[1];
			}
		else 
			move -y -relative ($pressPosition[1] - $absY);
		}
	else
		{
		//Contrain translate to XZ plane
		string $message = ("    tx: "+`bt_floatToNiceString $pressPosition[0]` +  "  ty: LOCKED  tz: "+`bt_floatToNiceString $pressPosition[2]`);
		if ($size == 1)
			{
			draggerContext -edit -drawString $message buildMoveContext;

            //first make sure xforms are zero'd out
            xform -ws -wd -a -t 0 0 0;
		    xform -ws -wd -a -rt 0 0 0;
            xform -ws -wd -a -st 0 0 0;
            //then move to position
			//xform -ws -a -t ($pressPosition[0]) `getAttr ($lastObj+".ty")` ($pressPosition[2]);	
			xform -ws -a -t ($pressPosition[0]) $absY ($pressPosition[2]);	
			}
		else 
			move -xz -relative ($pressPosition[0] - $absX) ($pressPosition[2] - $absZ);	



			
		}

	refresh -f -currentView;
}


global proc bt_buildMoveContextHold()
{
	//Print current location in HUD
	//

	float  $pressPosition[] = `draggerContext -query   -anchorPoint buildMoveContext`;
	string $modifier   = `draggerContext -query   -modifier buildMoveContext`;
	string $message;
	string $unit;
	string $tmp;

	string $Obj[] = `ls -sl -type transform`;

	$size = `size $Obj`;
	$lastObj = $Obj[$size-1];
	
	$absX = `getAttr ($lastObj+".tx")`;
	$absY = `getAttr ($lastObj+".ty")`;
	$absZ = `getAttr ($lastObj+".tz")`;
	
		
	if ($size > 1)
		return;
		
	//convert value from cm to current units because draggerContext always returns cm
	$unit = `currentUnit -q -linear`;
	if ($unit != "cm") 
		{
		$tmp = $pressPosition[0];
		$pressPosition[0] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		$tmp = $pressPosition[1];
		$pressPosition[1] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		$tmp = $pressPosition[2];
		$pressPosition[2] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		}
		
	if (`snapMode -q -point` || `snapMode -q -grid`)
		{
		//Move selected object with cursor along view plane
		string $message = ("    tx: "+`bt_floatToNiceString $pressPosition[0]` + "  ty: "+`bt_floatToNiceString $pressPosition[1]` + " tz: "+`bt_floatToNiceString $pressPosition[2]`);
		draggerContext -edit -drawString $message buildMoveContext;
		}
	else if ($modifier == "ctrl")
		{
		//Contrain translate to y axis
		string $message = ("    tx: LOCKED ty: "+`bt_floatToNiceString $pressPosition[1]` +  "  tz: LOCKED");
		draggerContext -edit -drawString $message buildMoveContext;
		}
	else
		{
		//Contrain translate to XZ plane
		string $message = ("    tx: "+`bt_floatToNiceString $pressPosition[0]` +  "  ty: LOCKED  tz: "+`bt_floatToNiceString $pressPosition[2]`);
		draggerContext -edit -drawString $message buildMoveContext;
		}

	//refresh -f -currentView;
}


global proc bt_buildMoveContextDrag()
{
	//Move selected object with cursor
	//

	float  $dragPosition[] = `draggerContext -query   -dragPoint buildMoveContext`;
	string $modifier   = `draggerContext -query   -modifier buildMoveContext`;
	string $message;
	string $unit;
	string $tmp;		

	string $Obj[] = `ls -sl -type transform`;

	$size = `size $Obj`;
	$lastObj = $Obj[$size-1];
	
	$absX = `getAttr ($lastObj+".tx")`;
	$absY = `getAttr ($lastObj+".ty")`;
	$absZ = `getAttr ($lastObj+".tz")`;
			
	//convert value from cm to current units because draggerContext always returns cm
	$unit = `currentUnit -q -linear`;
	if ($unit != "cm") 
		{
		$tmp = $dragPosition[0];
		$dragPosition[0] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		$tmp = $dragPosition[1];
		$dragPosition[1] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		$tmp = $dragPosition[2];
		$dragPosition[2] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		}

	if (`snapMode -q -point` || `snapMode -q -grid`)
		{
		//Move selected object with cursor along view plane
		string $message = ("    tx: "+`bt_floatToNiceString $dragPosition[0]` + "  ty: "+`bt_floatToNiceString $dragPosition[1]` + " tz: "+`bt_floatToNiceString $dragPosition[2]`);
		if ($size == 1)
			{
			draggerContext -edit -drawString $message buildMoveContext;
			move $dragPosition[0] $dragPosition[1] $dragPosition[2];
			}	
		else 
			move -relative ($dragPosition[0] - $absX) ($dragPosition[1] - $absY) ($dragPosition[2] - $absZ);
		}
	else if ($modifier == "ctrl")
		{
		//Contrain translate to y axis
		string $message = ("    tx: LOCKED ty: "+`bt_floatToNiceString $dragPosition[1]` +  "  tz: LOCKED");
		if ($size == 1)
			{
			draggerContext -edit -drawString $message buildMoveContext;
			move -y $dragPosition[1];
			}
		else 
			move -y -relative ($dragPosition[1] - $absY);			
		}
	else
		{
		//Contrain translate to XZ plane
		string $message = ("    tx: "+`bt_floatToNiceString $dragPosition[0]` +  "  ty: LOCKED  tz: "+`bt_floatToNiceString $dragPosition[2]`);
		if ($size == 1)
			{
			draggerContext -edit -drawString $message buildMoveContext;
			move -xz $dragPosition[0] $dragPosition[2];
			}
			
		else 
			move -xz -relative ($dragPosition[0] - $absX) ($dragPosition[2] - $absZ);
			
	
		}

	refresh -f -currentView;
}


global proc bt_buildMoveContextRelease()
{

	//Print location of object at release point
	//

	global string $bt_setGroundFloatName;

	string $Obj[] = `ls -sl -type transform`;

	
	float $releasePosition[] = `draggerContext -query   -dragPoint buildMoveContext`;
	string $modifier   = `draggerContext -query   -modifier buildMoveContext`;
	string $unit;
	string $tmp;	
	
	$size = `size $Obj`;
	$lastObj = $Obj[$size-1];
	
	$absX = `getAttr ($lastObj+".tx")`;
	$absY = `getAttr ($lastObj+".ty")`;
	$absZ = `getAttr ($lastObj+".tz")`;		

	if ($size > 1)
		{
		print ("Multiple objects dragged in relative mode.\n");
		return;
		}
		
			
	/*
	//convert value from cm to current units because draggerContext always returns cm
	$unit = `currentUnit -q -linear`;
	if ($unit != "cm") 
		{
		$tmp = $releasePosition[0];
		$releasePosition[0] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		$tmp = $releasePosition[1];
		$releasePosition[1] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		$tmp = $releasePosition[2];
		$releasePosition[2] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		}
			select -r $Obj;
	*/
			
	$releasePosition[0] = getAttr ($lastObj+".tx");	
	$releasePosition[1] = getAttr ($lastObj+".ty");	
	$releasePosition[2] = getAttr ($lastObj+".tz");	
	
	print ($lastObj +" is now located at: " + `bt_floatToNiceString $releasePosition[0]` + " " + `bt_floatToNiceString $releasePosition[1]` + " " + `bt_floatToNiceString $releasePosition[2]` + "\n");

	if ($modifier == "ctrl")
		{
		//Update ground plane to new Y value
		optionVar -floatValue bt_groundValue $releasePosition[1]; 
		//floatField -e -v $releasePosition[1] $bt_setGroundFloatName;
		}
		

	if (`snapMode -q -point` || `snapMode -q -grid`)
		{
		//Update ground plane to new Y value
		optionVar -floatValue bt_groundValue $releasePosition[1]; 
		//floatField -e -v $releasePosition[1] $bt_setGroundFloatName;
		}

}


global proc bt_clickDragObj()
{

	//Create and enable the dragger context 
	//for interactively placing new or imported object
	//

	global string $bt_buildMoveContextName;
	global string $bt_currentObj;
	global string $bt_objects[];
	global string $gSelect;

	
	$bt_objects = `ls -sl -type transform`;
	
	if (`size $bt_objects` == 0)
		{
		setToolTo $gSelect;
		warning ("No transform selected to drag");
		return;
		}
	//else if (`size $bt_objects` > 1)
	//	{
		//setToolTo $gSelect;
	//	warning ("Multiple objects will be dragged in relative mode.");
	//	}
	else
		//$bt_currentObj = $bt_objects[0];


	if ( `draggerContext -exists $bt_buildMoveContextName` )
	{
		deleteUI $bt_buildMoveContextName;
	}

		$bt_buildMoveContextName  = `draggerContext  -snp 1
				-pressCommand  (" bt_buildMoveContextPress()")
				-holdCommand  (" bt_buildMoveContextHold()")
				-dragCommand  ("undoInfo -swf 0; bt_buildMoveContextDrag(); undoInfo -swf 1")   // turn off undo first & turn on undo after
				-releaseCommand (" bt_buildMoveContextRelease()")
				-cursor	 "crossHair"
				-space world
				buildMoveContext`;

	// set the current tool to the dragger context
	setToolTo buildMoveContext;
	
	headsUpMessage -time 6.0 "Click drag in viewport to move selected object(s) around on current XZ plane.  CTRL to drag vertically along Y.  Hold x, c or v to snap.  Hit y to reactivate for new selection";


}

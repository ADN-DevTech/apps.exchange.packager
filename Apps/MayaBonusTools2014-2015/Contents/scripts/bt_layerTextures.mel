// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// international treaties.
//

// bt_layerTextures.mel
//
// For selected textures, create a layered texture node and add the textures to it as layers.
//
//
// Created by Steven T. L. Roselle 
// Based on original tool by cpam
// Last updated:      ( 02/01/12 )


global proc bt_layerTextures(){

	string $files[] = `ls -sl`;
	int $c = 0;
    string $layeredTx;

	string $colCon[] = `listConnections -d 1 -p 1 ($files[0]+".outColor")`;
	
    if (`size $colCon` != 0)
        {
     	turnTextureIntoLayeredTexture $files[0];
     	$tmp = `ls -sl`;
     	$layeredTx = $tmp[0];
     	
        if (`optionVar -q bt_layerTexturesAlpha`)
            connectAttr ($files[0] + ".outAlpha") ($layeredTx + ".inputs["+ $c + "].alpha");
     	$c++;
     	}
    else
    	$layeredTx = `shadingNode -asTexture layeredTexture`;
   
    while ($c < `size $files`)   	
	//for ($file in $files)
	    {

        if (`attributeQuery -node $files[$c] -exists "outColor"`)
            {
            connectAttr ($files[$c] + ".outColor") ($layeredTx + ".inputs["+ $c + "].color");
            if (`optionVar -q bt_layerTexturesAlpha`)
        		connectAttr ($files[$c] + ".outAlpha") ($layeredTx + ".inputs["+ $c + "].alpha");
		    }
		else 
		    warning ($files[$c] + " is not a texture. Skipping.");
    	$c ++;
	    }
	    
	select -r $layeredTx;
}




global proc bt_layerTexturesWin()

{
	//Creat UI and prompt user
	//
	global string $textName;
	if( (`window -exists bt_layerTexturesUI`) == true )
	{
		deleteUI bt_layerTexturesUI;
		windowPref -remove bt_layerTexturesUI;
	}
	
	window  
		 -width 100 -h 80
		-title "Layer Selected Texture(s)" bt_layerTexturesUI;
	columnLayout -adj 1;

    /*
    checkBox -al "right" -label "Connect Color"
        -ann "Connect alpha of texture to color of layer"
        -onc "optionVar -iv bt_layerTexturesColor 1"
        -ofc "optionVar -iv bt_layerTexturesColor 0"
        -v `optionVar -q bt_layerTexturesColor`;
    */
        		
    
    checkBox -al "right" -label "Include Alpha"
        -ann "Connect alpha of texture to alpha of layer"
        -onc "optionVar -iv bt_layerTexturesAlpha 1"
        -ofc "optionVar -iv bt_layerTexturesAlpha 0"
        -v `optionVar -q bt_layerTexturesAlpha`;

    
    separator;
    separator;
        
	button -label "Layer Textures" 
		-command ("bt_layerTextures; deleteUI bt_layerTexturesUI;");

	button -label "Apply" 
		-command ("bt_layerTextures");	

	button -label "Close" 
		-command ("deleteUI bt_layerTexturesUI;windowPref -remove bt_layerTexturesUI");
	
	showWindow bt_layerTexturesUI;	
}


bt_layerTexturesWin;
// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/////////////////////////////////////////////////////////////////////////////////////////////////	bt_mergeCombineMeshes;//// This tool will combine all selected meshes into a single object and stitch (merge) // any adjacent/coincident border edges.//// It was initially created as a companion to the bonusTool mirrorInstanceMesh but // can be used independently as well.//// NOTE: The newly created combined mesh will inherit the name of the first selected// poly object.global proc bt_mergeCombineMeshes(){	string $selected[], $polyShapes[], $polyXforms[], $firstMesh[] , $current;	$selected = `ls -sl`;	$polyShapes = `filterExpand -sm 12 -fp 1`;	if (`size $polyShapes` < 2)		error ("Select two or more mesh objects");	select -r $polyShapes[0];	$firstMesh = `listRelatives -p`;	select -r $polyShapes;	$polyXforms = `listRelatives -ap`;	//Combine meshes rename result to last selected obj	//	$newObj = `polyUnite -ch 1 $polyXforms`;		//rename result	select -r $firstMesh[0];	rename ($firstMesh[0]+"_orig");	select -r $newObj;	rename $firstMesh[0];	//isolate border	ConvertSelectionToEdges;	polySelectConstraint -m 2 -t 0x8000 -w 1;	resetPolySelectConstraint;           // turn off location constraint	//stitch border by merging any coincident verts	//select -r $firstMesh[0];	polyMergeVertex  -d 0.001;	select -r $firstMesh[0];}
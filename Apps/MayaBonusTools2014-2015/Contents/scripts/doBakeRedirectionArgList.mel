// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  April 7, 2004
//
//  Description:
//		Bakes redirection into an object.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

proc breakConnection (string $attr, int $deleteSources)
{
	string $source = `connectionInfo -sourceFromDestination $attr`;

	if (`size $source` > 0)
	{         
        if  ($deleteSources)
        {
            delete -inputConnectionsAndNodes $attr;
        }
        else
        {
            disconnectAttr $source $attr;
        }
	}
}

proc rewireConnection (string $sourceAttr, string $attr)
{
	string $source = `connectionInfo -sourceFromDestination $sourceAttr`;

	if (`size $source` > 0)
	{ 
		connectAttr $source $attr;
	}
}

global proc 
doBakeRedirectionArgList(int $version, string $args[])
{
    string $object = $args[0];
    int $doRotate = $args[1];
    int $doTranslate = $args[2];
    int $deleteSources = $args[3];
    string $rangeMethod = $args[4];
    int $start;
    int $end;
    
	if ($rangeMethod == "selectedMethod") {
        global string $gPlayBackSlider;
	    float $range[] = `timeControl -q -ra $gPlayBackSlider`;
		$start = $range[0];
        $end = $range[1];
	}
	else if ($rangeMethod == "timeSliderMethod") {
	    $start = `playbackOptions -q -min`;
	    $end = `playbackOptions -q -max`;
	}
	else if ($rangeMethod == "startEndMethod") {
        $start = $args[5];
        $end = $args[6];
	}
	else {
	    error("Invalid range method:  " + $rangeMethod + "!");
		$cmd = "";
	}
    
    if (`size $object` == 0)
    {
        error ("Select an object to bake.");
        return;
    }
    
    string $tempOb = `createNode transform`;

    int $i;
    for ($i = $start; $i <= $end; $i++)
    {
        currentTime $i;

        if ($doTranslate)
        {
            float $trans[] = `getAttr ($object+".translate")`;

            setKeyframe  -attribute translateX -value $trans[0]  $tempOb;
            setKeyframe  -attribute translateY -value  $trans[1] $tempOb;
            setKeyframe  -attribute translateZ -value $trans[2]  $tempOb;
        }
        
        if ($doRotate)
        {
            float $rot[] = `getAttr ($object+".rotate")`;

            setKeyframe  -attribute rotateX -value $rot[0]  $tempOb;
            setKeyframe  -attribute rotateY -value $rot[1]  $tempOb;
            setKeyframe  -attribute rotateZ -value $rot[2]  $tempOb;
        }
    }

    if ($doTranslate)
    {
        breakConnection ($object+".translateX") $deleteSources;
        breakConnection ($object+".translateY") $deleteSources;
        breakConnection ($object+".translateZ") $deleteSources;

        rewireConnection ($tempOb+".translateX") ($object+".translateX");
        rewireConnection ($tempOb+".translateY") ($object+".translateY");
        rewireConnection ($tempOb+".translateZ") ($object+".translateZ");
    }
    
    if ($doRotate)
    {
        breakConnection ($object+".rotateX") $deleteSources;
        breakConnection ($object+".rotateY") $deleteSources;
        breakConnection ($object+".rotateZ") $deleteSources;

        rewireConnection ($tempOb+".rotateX") ($object+".rotateX");
        rewireConnection ($tempOb+".rotateY") ($object+".rotateY");
        rewireConnection ($tempOb+".rotateZ") ($object+".rotateZ");
    }
    
    delete $tempOb;
}

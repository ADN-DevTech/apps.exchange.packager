// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// international treaties.
//

//
// international treaties.
//

// 
// Modified by Steven T. L. Roselle 
// Last updated:      ( 02/01/12 )

global proc float edgeLengthCalc()
{
 string $edges[] = `filterExpand -sm 32`;
 float $edgeLength = 0.0;

 string $vertices[];
 float $v1[3];
 float $v2[3];
 float $edgeFloat[3];
 vector $edgeVector;
 float $tmpEdgeLength;
 string $attached[];

 if ( `size($edges)` ){
  for( $thisEdge in $edges ){
    $attached = `polyListComponentConversion -ff -fe -fuv -fvf -tv $thisEdge`;
    
    $vertices = `filterExpand -sm 31 $attached`;

    $v1 = `pointPosition $vertices[0]`;
    $v2 = `pointPosition $vertices[1]`;
    
    for ( $i = 0; $i < 3; $i++ ){
	$edgeFloat[$i] = $v1[$i] - $v2[$i];
    }
    $edgeVector = $edgeFloat;
    
    $tmpEdgeLength = `mag $edgeVector`;
    $edgeLength += $tmpEdgeLength;
    print ("Edge length = " + $edgeLength + "\n");
  }
 }
 else {
  $edgeLength = 0.0;
 }

    return $edgeLength;
}

proc createEdgeLengthHUD (){

	headsUpDisplay
		-section          0
		-block            9
		-blockSize        "small"
		-label            "Edge Length:"
		-labelFontSize    "small"
		-dataFontSize	  "small"
		-command          "edgeLengthCalc"
		-event            "SelectionChanged"
		-nodeChanges      "attributeChange"
		-dp		4
	HUDEdgeLength;
}

global proc toggleEdgeLengthHUD (){

    if (`headsUpDisplay -ex HUDEdgeLength`)
	headsUpDisplay -rem HUDEdgeLength;
    else 
        createEdgeLengthHUD;
     	
}

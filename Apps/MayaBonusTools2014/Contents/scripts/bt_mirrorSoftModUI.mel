// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

///////////////////////////////////////////////////////////////////////////////////////////////// bt_mirrorSoftMod.mel//// Select an existing softMod node and create an inverted mirror on the associated object.//proc bt_mirrorSoftModNode(int $axis, int $space){		global string $gSelect;	float $offset;	//get selected object	$selected = `ls -sl`;	 	//start by disabling softmod tool if on	setToolTo $gSelect;			if (`size $selected` != 1)		error "No softmod node found.  Make sure preserve history is turned on in softmod options";		//Get names of all original nodes involved	//	$softModTransform_orig = $selected[0];	$softModShape_orig = `listRelatives -s`;	$softModNode_orig = `listConnections -t softMod`;		//Make sure we're working with a softmod node	//	if (`size $softModNode_orig` == 0)		error "No softmod node found.  Make sure preserve history is turned on in softmod options";		//Save presets for original nodes	nodePreset -save $softModTransform_orig "softModTransform_tmp";	nodePreset -save $softModShape_orig "softModShape_tmp";	nodePreset -save $softModNode_orig "softModNode_tmp";		//Get associated mesh	//	$meshName = `listConnections -t mesh $softModNode_orig[0]`;		//Create new softmod node	//	select -r $meshName;	//performSoftMod( 0, 1, 1, { float(0), float(0), float(0) } );	softMod $meshName;		//Get names of all new nodes involved	//	$selected = `ls -sl`;	$softModTransform_new = $selected[0];	$softModShape_new = `listRelatives -s`;	$softModNode_new = `listConnections -t softMod $softModShape_new`;		nodePreset -load $softModTransform_new "softModTransform_tmp";	nodePreset -load $softModShape_new "softModShape_tmp";	nodePreset -load $softModNode_new "softModNode_tmp";		nodePreset -delete $softModTransform_new "softModTransform_tmp";	nodePreset -delete $softModShape_new "softModShape_tmp";	nodePreset -delete $softModNode_new "softModNode_tmp";	//////////////////////////////////////////////////////	/*	// OLD METHOD USING NODECAST WAS BUGGY	// NOW USING NODEPRESET	//Copy the original softmod node and swap it with new one	//	select -r $softModTransform_orig;	duplicate -rr;	$selected = `ls -sl`;	$softModTransform_tmp = $selected[0];	$softModShape_tmp  = `listRelatives -s`;	$softModNode_tmp = `listConnections -t softMod $softModShape_tmp`;		nodeCast  $softModTransform_new $softModTransform_tmp;	nodeCast  $softModShape_new[0] $softModShape_tmp[0] ;	nodeCast  $softModNode_new[0] $softModNode_tmp[0]  ;		delete $softModTransform_new;	rename $softModTransform_tmp $softModTransform_new;	*/	////////////////////////////////////////////////////////	//Get names of all new nodes one more time	//	$selected = `ls -sl`;	$softModTransform_new = $selected[0];	$softModShape_new = `listRelatives -s`;	$softModNode_new = `listConnections -t softMod $softModShape_new`;			if ($axis == 0)		{		////////////////////////////////////////////////////////////////		//Invert across X 		//				//determine offset for inverse if not at origin		if ($space == 0) //object			$offset = (2.0 * `getAttr ($meshName[0] + ".translateX")`);		else // world			$offset = 0;					print ($offset + "\n");		$originX = (-1 * (`getAttr ($softModShape_orig[0] + ".originX")`) + $offset);		setAttr ($softModShape_new[0] + ".originX") $originX;		$originY = 1 * (`getAttr ($softModShape_orig[0] + ".originY")`);		setAttr ($softModShape_new[0] + ".originY") $originY;		$originZ = 1 * (`getAttr ($softModShape_orig[0] + ".originZ")`);		setAttr ($softModShape_new[0] + ".originZ") $originZ;						$scalePivotX = (-1 * (`getAttr ($softModTransform_orig + ".scalePivotX")`) + $offset);		setAttr ($softModTransform_new + ".scalePivotX") $scalePivotX ;		$scalePivotY = 1 * (`getAttr ($softModTransform_orig + ".scalePivotY")`);		setAttr ($softModTransform_new + ".scalePivotY") $scalePivotY ;		$scalePivotZ = 1 * (`getAttr ($softModTransform_orig + ".scalePivotZ")`);		setAttr ($softModTransform_new + ".scalePivotZ") $scalePivotZ ;						$rotatePivotX = (-1 * (`getAttr ($softModTransform_orig + ".rotatePivotX")`) + $offset);		setAttr ($softModTransform_new + ".rotatePivotX") $rotatePivotX ;		$rotatePivotY = 1 * (`getAttr ($softModTransform_orig + ".rotatePivotY")`);		setAttr ($softModTransform_new + ".rotatePivotY") $rotatePivotY ;		$rotatePivotZ = 1 * (`getAttr ($softModTransform_orig + ".rotatePivotZ")`);		setAttr ($softModTransform_new + ".rotatePivotZ") $rotatePivotZ ;								$scaleX = 1 * (`getAttr ($softModTransform_orig + ".scaleX")`);		setAttr ($softModTransform_new + ".scaleX") $scaleX;		$scaleY = 1 * (`getAttr ($softModTransform_orig + ".scaleY")`);		setAttr ($softModTransform_new + ".scaleY") $scaleY;		$scaleZ = 1 * (`getAttr ($softModTransform_orig + ".scaleZ")`);		setAttr ($softModTransform_new + ".scaleZ") $scaleZ;						$rotateX = 1 * (`getAttr ($softModTransform_orig + ".rotateX")`);		setAttr ($softModTransform_new + ".rotateX") $rotateX;		$rotateY = -1 * (`getAttr ($softModTransform_orig + ".rotateY")`);		setAttr ($softModTransform_new + ".rotateY") $rotateY;		$rotateZ = -1 * (`getAttr ($softModTransform_orig + ".rotateZ")`);		setAttr ($softModTransform_new + ".rotateZ") $rotateZ;						$falloffCenterX = (-1 * (`getAttr ($softModNode_orig[0]+ ".falloffCenterX")`) + $offset);		setAttr ($softModNode_new[0]+ ".falloffCenterX") $falloffCenterX;		$falloffCenterY = 1 * (`getAttr ($softModNode_orig[0]+ ".falloffCenterY")`);		setAttr ($softModNode_new[0]+ ".falloffCenterY") $falloffCenterY;		$falloffCenterZ = 1 * (`getAttr ($softModNode_orig[0]+ ".falloffCenterZ")`);		setAttr ($softModNode_new[0]+ ".falloffCenterZ") $falloffCenterZ;						$translateX = (-1 * (`getAttr ($softModTransform_orig + ".translateX")`));		setAttr ($softModTransform_new + ".translateX") $translateX;		$translateY = 1 * (`getAttr ($softModTransform_orig + ".translateY")`);		setAttr ($softModTransform_new + ".translateY") $translateY;		$translateZ = 1 * (`getAttr ($softModTransform_orig + ".translateZ")`);		setAttr ($softModTransform_new + ".translateZ") $translateZ;		}		else if ($axis == 1)		{		////////////////////////////////////////////////////////////////		//Invert across Y		//				//determine offset for inverse if not at origin		if ($space == 0) //object			$offset = (2 * `getAttr ($meshName[0] + ".translateY")`);		else // world			$offset = 0;					$originX = 1 * (`getAttr ($softModShape_orig[0] + ".originX")`) ;		setAttr ($softModShape_new[0] + ".originX") $originX;		$originY = (-1 * (`getAttr ($softModShape_orig[0] + ".originY")`) + $offset);		setAttr ($softModShape_new[0] + ".originY") $originY;		$originZ = 1 * (`getAttr ($softModShape_orig[0] + ".originZ")`);		setAttr ($softModShape_new[0] + ".originZ") $originZ;						$scalePivotX = 1 * (`getAttr ($softModTransform_orig + ".scalePivotX")`) ;		setAttr ($softModTransform_new + ".scalePivotX") $scalePivotX ;		$scalePivotY = (-1 * (`getAttr ($softModTransform_orig + ".scalePivotY")`) + $offset);		setAttr ($softModTransform_new + ".scalePivotY") $scalePivotY ;		$scalePivotZ = 1 * (`getAttr ($softModTransform_orig + ".scalePivotZ")`);		setAttr ($softModTransform_new + ".scalePivotZ") $scalePivotZ ;						$rotatePivotX = 1 * (`getAttr ($softModTransform_orig + ".rotatePivotX")`) ;		setAttr ($softModTransform_new + ".rotatePivotX") $rotatePivotX ;		$rotatePivotY = (-1 * (`getAttr ($softModTransform_orig + ".rotatePivotY")`)+ $offset);		setAttr ($softModTransform_new + ".rotatePivotY") $rotatePivotY ;		$rotatePivotZ = 1 * (`getAttr ($softModTransform_orig + ".rotatePivotZ")`);		setAttr ($softModTransform_new + ".rotatePivotZ") $rotatePivotZ ;								$scaleX = 1 * (`getAttr ($softModTransform_orig + ".scaleX")`);		setAttr ($softModTransform_new + ".scaleX") $scaleX;		$scaleY = 1 * (`getAttr ($softModTransform_orig + ".scaleY")`);		setAttr ($softModTransform_new + ".scaleY") $scaleY;		$scaleZ = 1 * (`getAttr ($softModTransform_orig + ".scaleZ")`);		setAttr ($softModTransform_new + ".scaleZ") $scaleZ;						$rotateX = -1 * (`getAttr ($softModTransform_orig + ".rotateX")`);		setAttr ($softModTransform_new + ".rotateX") $rotateX;		$rotateY = 1 * (`getAttr ($softModTransform_orig + ".rotateY")`);		setAttr ($softModTransform_new + ".rotateY") $rotateY;		$rotateZ = -1 * (`getAttr ($softModTransform_orig + ".rotateZ")`);		setAttr ($softModTransform_new + ".rotateZ") $rotateZ;						$falloffCenterX = 1 * (`getAttr ($softModNode_orig[0]+ ".falloffCenterX")`);		setAttr ($softModNode_new[0]+ ".falloffCenterX") $falloffCenterX;		$falloffCenterY = (-1 * (`getAttr ($softModNode_orig[0]+ ".falloffCenterY")`) + $offset);		setAttr ($softModNode_new[0]+ ".falloffCenterY") $falloffCenterY;		$falloffCenterZ = 1 * (`getAttr ($softModNode_orig[0]+ ".falloffCenterZ")`);		setAttr ($softModNode_new[0]+ ".falloffCenterZ") $falloffCenterZ;						$translateX = 1 * (`getAttr ($softModTransform_orig + ".translateX")`);		setAttr ($softModTransform_new + ".translateX") $translateX;		$translateY = (-1 * (`getAttr ($softModTransform_orig + ".translateY")`));		setAttr ($softModTransform_new + ".translateY") $translateY;		$translateZ = 1 * (`getAttr ($softModTransform_orig + ".translateZ")`);		setAttr ($softModTransform_new + ".translateZ") $translateZ;		}		else if ($axis == 2)		{		////////////////////////////////////////////////////////////////		//Invert across Z		//				//determine offset for inverse if not at origin		if ($space == 0) //object			$offset = (2 * `getAttr ($meshName[0] + ".translateZ")`);		else // world			$offset = 0;		$originX = 1 * (`getAttr ($softModShape_orig[0] + ".originX")`) ;		setAttr ($softModShape_new[0] + ".originX") $originX;		$originY = 1 * (`getAttr ($softModShape_orig[0] + ".originY")`);		setAttr ($softModShape_new[0] + ".originY") $originY;		$originZ = (-1 * (`getAttr ($softModShape_orig[0] + ".originZ")`) + $offset);		setAttr ($softModShape_new[0] + ".originZ") $originZ;						$scalePivotX = 1 * (`getAttr ($softModTransform_orig + ".scalePivotX")`) ;		setAttr ($softModTransform_new + ".scalePivotX") $scalePivotX ;		$scalePivotY = 1 * (`getAttr ($softModTransform_orig + ".scalePivotY")`);		setAttr ($softModTransform_new + ".scalePivotY") $scalePivotY ;		$scalePivotZ = (-1 * (`getAttr ($softModTransform_orig + ".scalePivotZ")`) + $offset);		setAttr ($softModTransform_new + ".scalePivotZ") $scalePivotZ ;						$rotatePivotX = 1 * (`getAttr ($softModTransform_orig + ".rotatePivotX")`) ;		setAttr ($softModTransform_new + ".rotatePivotX") $rotatePivotX ;		$rotatePivotY = 1 * (`getAttr ($softModTransform_orig + ".rotatePivotY")`);		setAttr ($softModTransform_new + ".rotatePivotY") $rotatePivotY ;		$rotatePivotZ = (-1 * (`getAttr ($softModTransform_orig + ".rotatePivotZ")`)+ $offset);		setAttr ($softModTransform_new + ".rotatePivotZ") $rotatePivotZ ;								$scaleX = 1 * (`getAttr ($softModTransform_orig + ".scaleX")`);		setAttr ($softModTransform_new + ".scaleX") $scaleX;		$scaleY = 1 * (`getAttr ($softModTransform_orig + ".scaleY")`);		setAttr ($softModTransform_new + ".scaleY") $scaleY;		$scaleZ = 1 * (`getAttr ($softModTransform_orig + ".scaleZ")`);		setAttr ($softModTransform_new + ".scaleZ") $scaleZ;						$rotateX = -1 * (`getAttr ($softModTransform_orig + ".rotateX")`);		setAttr ($softModTransform_new + ".rotateX") $rotateX;		$rotateY = -1 * (`getAttr ($softModTransform_orig + ".rotateY")`);		setAttr ($softModTransform_new + ".rotateY") $rotateY;		$rotateZ = 1 * (`getAttr ($softModTransform_orig + ".rotateZ")`);		setAttr ($softModTransform_new + ".rotateZ") $rotateZ;						$falloffCenterX = 1 * (`getAttr ($softModNode_orig[0]+ ".falloffCenterX")`);		setAttr ($softModNode_new[0]+ ".falloffCenterX") $falloffCenterX;		$falloffCenterY = 1 * (`getAttr ($softModNode_orig[0]+ ".falloffCenterY")`);		setAttr ($softModNode_new[0]+ ".falloffCenterY") $falloffCenterY;		$falloffCenterZ = (-1 * (`getAttr ($softModNode_orig[0]+ ".falloffCenterZ")`) + $offset);		setAttr ($softModNode_new[0]+ ".falloffCenterZ") $falloffCenterZ;						$translateX = 1 * (`getAttr ($softModTransform_orig + ".translateX")`);		setAttr ($softModTransform_new + ".translateX") $translateX;		$translateY = 1 * (`getAttr ($softModTransform_orig + ".translateY")`);		setAttr ($softModTransform_new + ".translateY") $translateY;		$translateZ = (-1 * (`getAttr ($softModTransform_orig + ".translateZ")`));		setAttr ($softModTransform_new + ".translateZ") $translateZ;		}		//disable softmod tool and turn on manip	global string $gSelect;	setToolTo ShowManips;}global proc bt_applyMirrorSoftMod(){	bt_mirrorSoftModNode `optionVar -q mirrorSoftModAxis` `optionVar -q mirrorSoftModSpace`;}///////////////////////////////////////////////////// OptionVarsglobal proc bt_setMirrorSoftModOptionVars(){	if (`optionVar -ex mirrorSoftModAxis` == 0)		optionVar -intValue mirrorSoftModAxis 0;   // 0=x : 1=y : 2=z	if (`optionVar -ex mirrorSoftModSpace` == 0)		optionVar -intValue mirrorSoftModSpace 0;  // 0=object : 1:world }global proc bt_deleteMirrorSoftModOptionVars(){	optionVar -rm mirrorSoftModAxis;	optionVar -rm mirrorSoftModSpace;}	///////////////////////////////////////////////////// UI Proc	global proc bt_mirrorSoftModUI(){	global string $mirrorSoftModAxisID;	global string $mirrorSoftModSpaceID;	bt_setMirrorSoftModOptionVars;			if( `window -exists mirrorSoftModWin` )		{		deleteUI mirrorSoftModWin;		//windowPref -remove mirrorSoftModWin;		}	window -w 338 -h 125 -menuBar true -title "Mirror Soft Mod" mirrorSoftModWin;		menu -tearOff 0 -l "Edit";	    menuItem -l "Reset Settings" -ann "Reset all setting to default values." -c "bt_deleteMirrorSoftModOptionVars ; bt_mirrorSoftModUI";	columnLayout -adjustableColumn 1;					//////////////////////////	// Axis and Space toggles	//	rowColumnLayout  -numberOfColumns 4 -columnWidth 1 140 -columnWidth 2 67 -columnWidth 3 67 -columnWidth 4 68; 					//Space		//				text -label "Mirror Space     " -align "right";									$mirrorSoftModSpaceID = `radioCollection`;		radioButton -label "Object"			-onc "optionVar -intValue mirrorSoftModSpace 0";				radioButton -label "World" 			-onc "optionVar -intValue mirrorSoftModSpace 1";				separator -style "none";		//select correct radio button for stored type		$buttonList = `radioCollection -q -collectionItemArray $mirrorSoftModSpaceID`;		int $buttonNumber = (`optionVar -q mirrorSoftModSpace`);		radioCollection -e -sl $buttonList[$buttonNumber] $mirrorSoftModSpaceID ;				//Axis		//				text -label "Mirror Axis     " -align "right";													$mirrorSoftModAxisID = `radioCollection`;		radioButton -label "X"			-onc "optionVar -intValue mirrorSoftModAxis 0";				radioButton -label "Y"			-onc "optionVar -intValue mirrorSoftModAxis 1";				radioButton -label "Z"			-onc "optionVar -intValue mirrorSoftModAxis 2";				//select correct radio button for stored type		$buttonList = `radioCollection -q -collectionItemArray $mirrorSoftModAxisID`;		int $buttonNumber = (`optionVar -q mirrorSoftModAxis`);		radioCollection -e -sl $buttonList[$buttonNumber] $mirrorSoftModAxisID;				setParent ..;				separator -style "none";separator -style "none";separator -style "none";separator -style "none";		//////////////				rowColumnLayout  -numberOfColumns 2 -columnWidth 1 165  -columnWidth 2 165 ;				separator -style none;separator -style none;		separator -style none;separator -style none;		button -label "Apply" -c ("bt_applyMirrorSoftMod");		button -label "Close" -c "deleteUI mirrorSoftModWin";			showWindow;	}//bt_mirrorSoftModUI;
// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// international treaties.
//

//
// international treaties.
//


//
//  Creation Date:  February 14 1999
//  Autor: Michele Borghi (Alias Italy) 
//
//  revision date: April 17 2009
//  SRoselle : Fixed problem where "/" was getting added before relative paths
//
//  revision date: Jan 25 2010
//  SRoselle : Removing Multilister as an option	
//
//  revision date: Jan 13 2012
//  SRoselle : Update naming so options will be more descriptive and fixed various path issues
//
//  Procedure Name: relocateTexturesWin()
//
//  Description:
//    this script creates a UI which lets you redirect texture paths in the 
//	  current scene. Read the How-To article at the Assistant Online 
//    on how to use this UI. 
//
//





proc string getCurrentPath()
{
//
//	returns the current workspace's sourceImages dir
//
    
    //string	$renderWorkSpace[] = `workspace -q -rt`;
    string	$renderWorkSpace[] = `workspace -q -fileRule`;  //changed in 2013
    int	$i;
    string 	$returnValue;

    $listSize = size($renderWorkSpace);

    for ($i=0;$i<$listSize;$i++)
    {
	    if ($renderWorkSpace[$i] == "sourceImages") $returnValue = $renderWorkSpace[$i+1];
    }
    return $returnValue;
}


proc string removeRoot(string $fullPath)
{
    string	$currentAbsolutePath;
    string 	$returnValue;
    int 	$lenght;
    
    //get the current project's absolute path
    $currentAbsolutePath = `workspace -q -rd`;
    
        
    //remove the final "/" from the full path
    $lenght = `size($fullPath)`;
    $fullPath = `substring $fullPath 1 ($lenght -1)`;
    
        
    $returnValue = `substitute $currentAbsolutePath $fullPath ""`;
    return $returnValue;
}
    
    
proc scanDirs(string $list[], string $prefix)
{

// scans the sourceimages directory looking for subdirectories.
// the result goes to the optionMenu
//
// this procedure is invoked recursively from createOptionMenu()
//

string 	$tmp;
int	$count;
string	$newPrefix;
string	$newList[];
string	$menuItem;

for ($tmp in $list)
{
    if ((`gmatch $tmp "*/"`) && (!(`gmatch $tmp "./"`)) && (!(`gmatch $tmp "../"`)))
    {
	    $newPrefix = ($prefix + $tmp);
	    $menuItem = removeRoot($newPrefix);

			    //Fixed problem where "/" was getting added before relative paths
			    //menuItem -label ($menuItem + "/");
			    //menuItem -label ("."+$menuItem + "/");
			    //Fixed 2012 problem for missing ./
			    menuItem -label ("./"+$menuItem + "/");

			    $newList = `workspace -l $newPrefix`;

			    if (size($newList)) scanDirs($newList, $newPrefix);
		    }
	    }
    }
    
    
    
    
global proc string createOptionMenu(string $theParent)
    {
    //
    // creates the optionMenu that contains the sourceimages directory's subtree
    //
    // returns the path to the conrol
    // 
    
    string 	$currentRelativePath;	//the current sourceImages directory
    string	$currentAbsolutePath;	//the current project's absolute path
    string	$fullPath;		//the complete path
    string	$ls[];			//the directory listing
	    
    
    //get the current sourceImages directory
    $currentRelativePath = getCurrentPath();

    //get the current project's absolute path
    $currentAbsolutePath = `workspace -q -rd`;

	$fullPath = ($currentAbsolutePath + $currentRelativePath + "/");

    //if (`filetest -r $fullPath` == 0)


    //$ls = `workspace -l $fullPath`;
    $ls = `workspace -l $currentAbsolutePath`;
    
    $optionMenu = `optionMenu 	-label "Folders in Current Project" 
				    -enable false 
				    -parent $theParent`;
				    //Fixed 2012 problem for missing ./
                    menuItem -label ("./" + $currentRelativePath + "/");
                    // menuItem -label ($currentRelativePath + "/");
                    // menuItem -label ($currentRelativePath);
	//scanDirs($ls, $fullPath);
    scanDirs($ls, $currentAbsolutePath);
    return $optionMenu;

    }
    
    
    
proc string extractFileName(string $path)
    {
    //
    // given the full file path, extracts and returns the filename
    //
    
    string $tokens[];
    int $numTokens = `tokenize $path "/" $tokens`;
    return $tokens[$numTokens -1];
    }
    
    
    proc string extractSubdir(string $pattern, string $path)
    {
    //
    // this function extract and returns the "subpath" from the given filename, given a "root" directory
    //
    // e.g. given "mypicsdir" and "/usr/people/home/maya/projects/mypicsdir/characters/character1/face/eye.iff"
    // returns "characters/character1/face/"
    //
    
    string 	$tokens[];
    int 	$numTokens;
    string 	$returnValue = "";
    int 	$index;
    int	$counter;
    string	$buffer = "";
    
    
    // break in pieces
    $numTokens = `tokenize $path "/" $tokens`;
    $counter = $numTokens-2;

    do
    {
	    $returnValue = ($tokens[$counter] + "/" + $buffer);
	    $buffer = $returnValue;
	    $counter--;
    } while (($tokens[$counter] != $pattern) && ($counter > 1));
    
    return $returnValue;
}
    
    
    
    
proc string[] getSelectedTextureList()
{
    //
    // filters the selected nodes in the multilister "textures" tab and returns
    // an array that contains the selected "file" nodes
    //
    
    
    int 	$counter = 0;
    string 	$returnValue[];
    string 	$item;
    string	$selectedTextureNodes[] = `listerEditor -q -hl multiListerPanel1BottomTab1`;
    
	    
    for ($item in $selectedTextureNodes)
    {
	    if (`nodeType $item` == "file")
	    {
		    $returnValue[$counter] = $item;
		    $counter++;
	    }
    }
    return $returnValue;
}
    
    
    
proc dimRadioButton(string $radioButton)
{
    if (size(getSelectedTextureList()))
    {
	    radioButton -edit -enable true $radioButton;
    }else
    {
	    radioButton -edit -enable false $radioButton;
    }
}
    
    
    
global proc relocateTexturesWin()
    {
    
    string 	$currentRelativePath;	//the current sourceImages directory
    string	$currentAbsolutePath;	//the current project's absolute path
    string 	$textureNodes[];	//the current scene's file texture nodes list
    int 	$numTextures;		//the number of file texture nodes found
    string	$node;			//temp data
    string	$tmp;
    
	    //get the current sourceImages directory
	    $currentRelativePath = getCurrentPath();
    
	    //get the current project's absolute path
	    $currentAbsolutePath = `workspace -q -rd`;
    
	    //get the current scene's file texture nodes list and count 'em
	    $textureNodes = `ls -typ file`;
	    $numTextures = size($textureNodes);
    
    
	    if (`window -ex relocateTexturesWin`) deleteUI relocateTexturesWin;
    
	    //
	    //	CREATE THE WINDOW
	    window -width 450 -height 450 -sizeable true 
			-title "Change Texture Paths" relocateTexturesWin;
    
		    $form = `formLayout -numberOfDivisions 100 mainForm`;
		    $frame = `frameLayout
				    -borderVisible true 
				    -borderStyle "in"
				    -label "Summary"
				    -labelVisible false
				    //-labelAlign "bottom"
				    -marginWidth 5 
				    -marginHeight 5 
				    descriptionFrame`;
			    string $theColumn = `columnLayout`;
				    text
					    -label "Change" 
					    -align "left";
				    string $radioList = `radioCollection`;
					    rowLayout 	-numberOfColumns 3
							    -columnWidth3 110 180 150;
						    string $allRadio = `radioButton 
							    -label "All textures"
							    -sl
							    -align "left" all`;

						    string $hyperRadio = `radioButton 
							    -label "Textures selected in Hypershade" 
							    -align "left" hypershade`;
							 
							string $multiRadio;
							// Multilist is obsolete
						    //string $multiRadio = `radioButton 
							//    -label "in Multilister" 
							//    -align "left" multilister`;
							separator;
							
					    setParent ..;
    
				    separator -height 15 -width 500 -style "in";;
				    text
					    -label "Path Type" 
					    -align "left";
				    string $radioRelocMode = `radioCollection`;
					    rowLayout 	-numberOfColumns 2
							    -columnWidth2 110 180;
					    radioButton 
						    -label "Relative Path"
						    -sl
						    -align "left" relative;
					    radioButton 
						    -label "Absolute Path" 
						    -align "left" absolute;
					    setParent ..;
				    separator -height 15 -width 500 -style "in";;
    
				    text
					    -label "Change Path" 
					    -align "left";
				    string $radioRelocTo = `radioCollection`;
					    string $autoRadio = `radioButton 
						    -label "To sourceimages"
						    -sl 
						    -align "left" auto`;
					    string $autoLayout =`rowLayout 	-numberOfColumns 4
							    -enable on
							    -columnWidth4 30 28 150 350`;
						    text -label " ";
						    string $checkBox = `checkBox - align "right" -label "" -value off`;
						    string $text = `text -label "Make existing path relative to"`;
						    string $rootField = `textField -text "sourceimages" -width 230 -editable false -enable false`;
					    setParent ..;
					    string $customRadio = `radioButton 
						    -label "To Specified Folder" 
						    -align "left" custom`;
				    string $optionMenu = createOptionMenu($theColumn);
    
				    //add functionality to the checkbox
				    checkBox -edit 	-onCommand ("textField -edit -enable true " + $rootField) 
						    -offCommand ("textField -edit -enable false " + $rootField) $checkBox;
				    
    //				//dim the "selected" radioButton if nothing is selected in the multilister
    //				dimRadioButton($selectedRadio);
    
				    //dim the autoLayout if radio selection is "This Directory"
				    radioButton -edit -onCommand ("rowLayout -edit -enable true " + $autoLayout) $autoRadio;
				    radioButton -edit -offCommand ("rowLayout -edit -enable false " + $autoLayout) $autoRadio;
				    //dim the optionMenu if radio selection is "Automatic"
				    radioButton -edit -onCommand ("optionMenu -edit -enable true " + $optionMenu) $customRadio;
				    radioButton -edit -offCommand ("optionMenu -edit -enable false " + $optionMenu) $customRadio;
    
				    separator -height 15 -width 500 -style "in";;
    
				    frameLayout -width 450
				    //	-height 155
					    -borderVisible true
					    -borderStyle "etchedIn"
					    -labelVisible true 
					    //-labelAlign "center"
					    -marginWidth 1 
					    -marginHeight 5
					    -label "Scene info"
					    -collapsable true
					    -collapse true
					    infoFrame;
					    columnLayout optionColumn;
						    text
							    -label "Current Project Path" 
							    -align "left";
						    textField 
							    -w 350
							    -tx $currentAbsolutePath
							    -ed false;
						    textFieldGrp
							    -label "Current \"sourceImages\" directory:"
							    -text $currentRelativePath
							    -columnAlign 1 "left"
							    -columnWidth 1 210
							    -columnWidth 2 140
							    -editable false;
						    textFieldGrp
							    -label "Number of file textures found"
							    -text $numTextures
							    -columnAlign 1 "left"
							    -columnWidth 1 210
							    -columnWidth 2 50
							    -editable false;
				    setParent $form;
    
		    string $pane = `paneLayout`;
			    string $mainList= `textScrollList -numberOfRows 8 -allowMultiSelection false`;
    
			    // fill the list
    
			    if ($numTextures)
			    {
				    for ($node in $textureNodes)
				    {
					    $tmp = `getAttr ($node + ".fileTextureName")`;
					    if (size($tmp))
					    {
						    textScrollList -e -append $tmp $mainList;
					    }else
					    {
						    textScrollList -e -append "< empty node. - IGNORED - >"  $mainList;
					    }
				    }
			    }else
			    {
				    textScrollList -e -append "< none >" $mainList;
			    }
			    
    
    
		    //update the window when the selection type is changed
		    radioButton -edit -changeCommand ("applyCommand " + $optionMenu + " " + 
									    $radioList + " " + 
									    $radioRelocMode + " " + 
									    $radioRelocTo + " " + 
									    $checkBox + " " + 
									    $rootField + " " + 
									    $mainList + 
									    " v") $allRadio;
    
            /*		    
		    radioButton -edit -changeCommand ("applyCommand " + $optionMenu + " " + 
									    $radioList + " " + 
									    $radioRelocMode + " " + 
									    $radioRelocTo + " " + 
									    $checkBox + " " + 
									    $rootField + " " + 
									    $mainList + 
									    " v") $multiRadio;
	        */

		    radioButton -edit -changeCommand ("applyCommand " + $optionMenu + " " + 
									    $radioList + " " + 
									    $radioRelocMode + " " + 
									    $radioRelocTo + " " + 
									    $checkBox + " " + 
									    $rootField + " " + 
									    $mainList + 
									    " v") $hyperRadio;
    
		    setParent relocateTexturesWin|mainForm;
		    string $applyButton = `button 	-label "Apply" 
						    -align "center"
						    -command ("applyCommand " + $optionMenu + " " + 
									    $radioList + " " + 
									    $radioRelocMode + " " + 
									    $radioRelocTo + " " + 
									    $checkBox + " " + 
									    $rootField + " " + 
									    $mainList + 
									    " e")
						    apply`;
		    string $resetButton = `button 	-label "Reset" 
						    -align "center"
						    -command ("resetCommand " + $mainList)
						    reset`;
		    string $previewButton = `button -label "Preiew" 
						    -align "center"
						    -command ("applyCommand " + $optionMenu + " " + 
									    $radioList + " " + 
									    $radioRelocMode + " " + 
									    $radioRelocTo + " " + 
									    $checkBox + " " + 
									    $rootField + " " + 
									    $mainList + 
									    " v")
						    preview`;
		    string $cancelButton = `button 	-label "Close" 
						    -align "center"
						    -command "deleteUI relocateTexturesWin"
						    close`;
    
		    if (!$numTextures)
		    {
			     button -edit -enable false $applyButton;
			     button -edit -enable false $previewButton;
		    }
    
		    formLayout -edit
			    -attachForm		$frame	"top"	1
			    -attachForm		$frame	"left"	1
			    -attachNone		$frame	"bottom"
			    -attachForm 		$frame	"right" 1 
    
			    -attachControl		$pane	"top" 5 $frame
			    -attachForm		$pane	"left"	1
			    -attachForm		$pane	"right" 1
			    -attachControl		$pane	"bottom" 5 $applyButton
    
			    -attachNone		$applyButton	"top" 
			    -attachForm		$applyButton	"left"	5
			    -attachPosition	$applyButton	"right" 3 25
			    -attachForm		$applyButton	"bottom" 5
    
			    -attachOppositeControl	$resetButton	"top" 0 $applyButton
			    -attachPosition		$resetButton	"left"	3 25
			    -attachPosition		$resetButton	"right" 3 50
			    -attachForm		$resetButton	"bottom" 5
    
			    -attachOppositeControl	$previewButton	"top" 0 $applyButton
			    -attachPosition		$previewButton	"left"	3 50
			    -attachPosition		$previewButton	"right" 3 75
			    -attachForm		$previewButton	"bottom" 5
    
			    -attachOppositeControl	$cancelButton	"top" 0 $previewButton
			    -attachPosition		$cancelButton	"left"	3 75
			    -attachForm		$cancelButton	"right" 5
			    -attachForm		$cancelButton	"bottom" 5
    
		    $form;
    
    
	    showWindow;
    
}
    
    
    
global proc resetCommand (string $mainList)
{
    
    string	$textureNodes[];
    int 	$numTextures;
    string 	$node;
    string	$tmp;
    
	    //clear the list
	    textScrollList -e -removeAll $mainList;
    
	    //get the current scene's file texture nodes list and count 'em
	    $textureNodes = `ls -typ file`;
	    $numTextures = size($textureNodes);
    
	    if ($numTextures)
	    {
		    for ($node in $textureNodes)
		    {
			    $tmp = `getAttr ($node + ".fileTextureName")`;
			    if (size($tmp))
			    {
				    textScrollList -e -append $tmp $mainList;
			    }else
			    {
				    textScrollList -e -append "< empty node. - IGNORED - >"  $mainList;
			    }
		    }
	    }else
	    {
		    textScrollList -e -append "< none >" $mainList;
	    }
    
}
    
    
    
    
    
    
global proc applyCommand (string $optionMenu, string $radioList, string $radioRelocMode, 
			    string $radioRelocTo, string $checkBox, string $textField, 
			    string $scrollList, string $verbose)
    {
    string 	$currentSourceimagesDir;	//the current sourceImages directory
    string	$currentProjectPath;		//the current project's absolute path
    string	$currentSubdir;			//the current sourceimages sub path
    string	$currentCustomPath;		//the user's optionMenu choice
    string 	$orgSubdir;			//the textField entry
    string 	$orgFileName;			//the original full lenght file name
    string	$shortFileName;			//the file name only
    string	$newFileName;
    string 	$selectedTextureNodes[];	//the multilister selected nodes list
    string 	$textureNodes[];		//the file texture nodes list
    int 	$numTextures;			//the number of file texture nodes
    string 	$relocMode;			//relocation mode
    string 	$relocTo;			//relocation mode
    string	$selectCriteria;		//selection mode
    int	$warning = 0;			//error flag
    
    string	$node;				//temp data
    string	$tokens[];
    int 	$numTokens; 
    
    
	    //get the "Selection mode" from the window
	    $selectCriteria = `radioCollection -q -sl $radioList`;
    
	    //get the "relocation mode" from the window
	    $relocMode = `radioCollection -q -sl $radioRelocMode`;
    
	    //get the "relocation mode" from the window
	    $relocTo = `radioCollection -q -sl $radioRelocTo`;
    
	    //get the text field entry
	    $orgSubdir = `textField -q -text $textField`;
    
	    //get the current scene's file texture nodes list
	    switch ($selectCriteria)
	    {
		    case "all":
			    $textureNodes = `ls -typ file`;
			    break;
    
		    case "multilister":
			    $textureNodes = getSelectedTextureList();
			    break;

		    case "hypershade":
			    $textureNodes = `ls -sl -typ file`;
			    break;
	    }	
    

	    //count the number of nodes we want to apply the command
	    $numTextures = size($textureNodes);
   
	    //set the first part of the path according to the relocation mode
	    switch ($relocMode)
	    {
		    case "absolute":
			    //get the current project's absolute path
			    $currentProjectPath = `workspace -q -rd`;
			    break;
		    case "relative":
			    $currentProjectPath = "";
			    break;
	    }
    
    
	    //clear the list
	    textScrollList -e -removeAll $scrollList;
    
    
	    if ($numTextures)
	    {
		    for ($node in $textureNodes)
		    {
			    $orgFileName = `getAttr ($node + ".fileTextureName")`;
			    $shortFileName = extractFileName($orgFileName);
			    
			    if (size($orgFileName))
			    {
				    switch ($relocTo)
				    {
					    case "auto":
						    //get the current sourceImages directory
						    $currentSourceimagesDir = getCurrentPath();
						    $currentSourceimagesDir = "./" + $currentSourceimagesDir + "/";
    
						    if (`checkBox -q -value $checkBox`)
						    {
							    $numTokens = `tokenize $orgFileName "/" $tokens`;
    
    
							    if (size($orgSubdir)) //if not an empty field
							    {
								    if ($numTokens > 1) // if valid number. at least 2
								    {
									    $currentSubdir = extractSubdir($orgSubdir, $orgFileName);
									    $newFileName = 	$currentProjectPath + 
											    $currentSourceimagesDir + 
											    $currentSubdir + 
											    $shortFileName;
								    }else $warning++; //error not enough "tokens"
							    }else //an empty field, a special case
							    {
								    $newFileName = 	$currentProjectPath + 
										    $currentSourceimagesDir + 
										    $orgFileName;
							    }
   	 
    
    
						    }else
						    {
							    $newFileName = $currentProjectPath + $currentSourceimagesDir + $shortFileName;
						    }
						    
						    
						    if ($verbose == "e") setAttr -type "string" ( $node + ".fileTextureName") $newFileName;
						    break;
					    case "custom":
						    $currentCustomPath = `optionMenu -query -value $optionMenu`;
						    $newFileName = $currentProjectPath + $currentCustomPath + $shortFileName;
						    if ($verbose == "e") setAttr -type "string" ( $node + ".fileTextureName") $newFileName;
						    break;
    
				    }
			    }else
			    {
				    $newFileName = "< empty node. - IGNORED - >";
			    }
    	
			    textScrollList -e -append $newFileName $scrollList;
		    }
 	    }else
	    {
		    switch ($selectCriteria)
		    {
			    case "all":
				    textScrollList -e -append "< none >" $scrollList;
				    break;
    
			    case "multilister":
				    textScrollList -e -append "< nothing selected in the multilister >" $scrollList;
				    break;

			    case "hypershade":
				    textScrollList -e -append "< nothing selected in the hypershade >" $scrollList;
				    break;
		    }	
 	    }
   
	    if ($warning) confirmDialog -title "Warning!" -message "some nodes didn't match";
    
}
    
    
//relocateTexturesWin;
